SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- Creacion del schema

CREATE SCHEMA IF NOT EXISTS `doctrack` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `doctrack` ;

-- Se eliminan los procedimientos almacenados

DROP PROCEDURE IF EXISTS PROC_INSERT_EMPLOYEE;
DROP PROCEDURE IF EXISTS PROC_INSERT_REQUEST;
DROP PROCEDURE IF EXISTS PROC_INSERT_REQUIREMENT;
DROP PROCEDURE IF EXISTS PROC_INSERT_DEPARTMENT;
DROP PROCEDURE IF EXISTS PROC_INSERT_JOB;
DROP PROCEDURE IF EXISTS PROC_INSERT_REQUESTS_REQUIREMENTS;
DROP PROCEDURE IF EXISTS PROC_DELETE_EMPLOYEE;
DROP PROCEDURE IF EXISTS PROC_DELETE_DEPARTMENT;
DROP PROCEDURE IF EXISTS PROC_DELETE_JOB;
DROP PROCEDURE IF EXISTS PROC_DELETE_REQUIREMENT;
DROP PROCEDURE IF EXISTS PROC_DELETE_REQUEST;
DROP PROCEDURE IF EXISTS PROC_DELETE_REQUESTS_REQUIREMENTS;
DROP PROCEDURE IF EXISTS PROC_UPDATE_EMPLOYEE;
DROP PROCEDURE IF EXISTS PROC_UPDATE_REQUEST;
DROP PROCEDURE IF EXISTS PROC_UPDATE_REQUIREMENT;
DROP PROCEDURE IF EXISTS PROC_UPDATE_DEPARTMENT;
DROP PROCEDURE IF EXISTS PROC_UPDATE_JOB;
DROP PROCEDURE IF EXISTS PROC_UPDATE_REQUESTS_REQUIREMENTS;
DROP PROCEDURE IF EXISTS PROC_LIST_JOBS;
DROP PROCEDURE IF EXISTS PROC_LIST_DEPARTMENTS;
DROP PROCEDURE IF EXISTS PROC_LIST_EMPLOYEES;
DROP PROCEDURE IF EXISTS PROC_LIST_REQUIREMENTS;
DROP PROCEDURE IF EXISTS PROC_LIST_REQUESTS;
DROP PROCEDURE IF EXISTS PROC_LIST_EMPLOYEES;
DROP PROCEDURE IF EXISTS PROC_LIST_REQUESTS;
DROP PROCEDURE IF EXISTS PROC_LIST_REQUIREMENTS;
DROP PROCEDURE IF EXISTS PROC_LIST_REQUESTS_REQUIREMENTS;

-- Se eliminan todas las tablas.
DROP TABLE IF EXISTS T_CLIENTS;
DROP TABLE IF EXISTS T_EMPLOYEES;
DROP TABLE IF EXISTS T_USERS;
DROP TABLE IF EXISTS T_DEPARTMENTS;
DROP TABLE IF EXISTS T_JOBS;
DROP TABLE IF EXISTS T_ROLES;
DROP TABLE IF EXISTS T_TICKETS;
DROP TABLE IF EXISTS T_RESOLUTIONS;
DROP TABLE IF EXISTS T_REQUIREMENTS;
DROP TABLE IF EXISTS T_REQUESTS;
DROP TABLE IF EXISTS T_REQUESTS_REQUIREMENTS;

-- Esto sirve para poder que se verifiquen FK'S al eliminar una tabla.
SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- Creación de tablas.
CREATE TABLE T_CLIENTS (CLIENT_ID int not null auto_increment, FIRST_NAME varchar (50) not null, FIRST_SURNAME varchar(50), SECOND_SURNAME varchar(50), EMAIL varchar(50) not null,TELEPHONE varchar(25) not null, 
PRIMARY KEY(CLIENT_ID))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE TABLE T_DEPARTMENTS (DEPARTMENT_ID int not null auto_increment, DEPARTMENT_NAME varchar(50) not null, MANAGER_ID int null, 
PRIMARY KEY(DEPARTMENT_ID))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE TABLE T_EMPLOYEES(EMPLOYEE_ID int not null auto_increment, DNI varchar(20)not null, FIRST_NAME varchar (50) not null, FIRST_SURNAME varchar(50), SECOND_SURNAME varchar(50), EMAIL varchar(50) not null,TELEPHONE varchar(25) not null, DEPARTMENT_ID int not null,JOB_ID int not null, STATUS varchar(10)
CONSTRAINT CK_EMP_STATUS CHECK ((STATUS = 'ENABLED' OR STATUS = 'DISABLED')),
PRIMARY KEY(EMPLOYEE_ID))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE TABLE T_ROLES(ROLE_ID int not null auto_increment, NAME varchar(50) not null,
PRIMARY KEY(ROLE_ID))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE TABLE T_USERS(USERNAME varchar(10) not null, PASSWD varchar (50) not null,ROLE_ID int not null, EMPLOYEE_ID int null, CLIENT_ID int null, STATUS varchar(20)
CONSTRAINT CK_USER_STATUS CHECK ((STATUS = 'ENABLED' OR STATUS = 'DISABLED')),
PRIMARY KEY(USERNAME))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE TABLE T_JOBS (JOB_ID int not null auto_increment, JOB_TITLE varchar(50) not null, 
PRIMARY KEY(JOB_ID))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE TABLE T_TICKETS (TICKET_ID int not null auto_increment, TITLE varchar(100) not null, DESCRIPTION varchar(1000) null, REQUEST_ID int not null, DEPARTMENT_ID int not null, EMPLOYEE_ID int not null, CLIENT_ID int not null,ESTADO varchar(20) not null, 
PRIMARY KEY(TICKET_ID))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE TABLE T_RESOLUTIONS (RESOLUTION_ID int not null auto_increment, TICKET_ID int not null, DESCRIPTION varchar(1000),EMPLOYEE_ID int not null, 
PRIMARY KEY(RESOLUTION_ID))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE TABLE T_REQUIREMENTS (REQUIREMENT_ID int not null auto_increment,TITLE varchar(250) not null, DESCRIPTION varchar(1000) not null, 
PRIMARY KEY(REQUIREMENT_ID))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE TABLE T_REQUESTS (REQUEST_ID int not null auto_increment, TITLE varchar(250) not null, DESCRIPTION varchar(1000) not null, 
PRIMARY KEY(REQUEST_ID))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE TABLE T_REQUESTS_REQUIREMENTS (REQUEST_REQUIREMENT_ID int not null auto_increment,REQUEST_ID int not null, REQUIREMENT_ID int not null, 
PRIMARY KEY(REQUEST_REQUIREMENT_ID))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

-- Creación de los FK de las tablas creadas.
ALTER TABLE T_REQUESTS_REQUIREMENTS ADD FOREIGN KEY (REQUEST_ID) REFERENCES T_REQUESTS(REQUEST_ID);
ALTER TABLE T_REQUESTS_REQUIREMENTS ADD FOREIGN KEY (REQUIREMENT_ID) REFERENCES T_REQUIREMENTS(REQUIREMENT_ID);
ALTER TABLE T_RESOLUTIONS ADD FOREIGN KEY (EMPLOYEE_ID) REFERENCES T_EMPLOYEES(EMPLOYEE_ID);
ALTER TABLE T_RESOLUTIONS ADD FOREIGN KEY (TICKET_ID) REFERENCES T_TICKETS(TICKET_ID);
ALTER TABLE T_TICKETS ADD FOREIGN KEY (REQUEST_ID) REFERENCES T_REQUESTS(REQUEST_ID);
ALTER TABLE T_TICKETS ADD FOREIGN KEY (EMPLOYEE_ID) REFERENCES T_EMPLOYEES(EMPLOYEE_ID);
ALTER TABLE T_TICKETS ADD FOREIGN KEY (CLIENT_ID) REFERENCES T_CLIENTS(CLIENT_ID);
ALTER TABLE T_DEPARTMENTS ADD FOREIGN KEY (MANAGER_ID) REFERENCES T_EMPLOYEES(EMPLOYEE_ID);
ALTER TABLE T_USERS ADD FOREIGN KEY (EMPLOYEE_ID) REFERENCES T_EMPLOYEES(EMPLOYEE_ID);
ALTER TABLE T_USERS ADD FOREIGN KEY (ROLE_ID) REFERENCES T_ROLES(ROLE_ID);
ALTER TABLE T_USERS ADD FOREIGN KEY (CLIENT_ID) REFERENCES T_CLIENTS(CLIENT_ID);
ALTER TABLE T_EMPLOYEES ADD FOREIGN KEY (DEPARTMENT_ID) REFERENCES T_DEPARTMENTS(DEPARTMENT_ID);
ALTER TABLE T_EMPLOYEES ADD FOREIGN KEY (JOB_ID) REFERENCES T_JOBS(JOB_ID);


-- INSERCION DE DATOS DE PRUEBA
INSERT INTO T_ROLES (ROLE_ID,NAME) VALUES (1,'SUPER ADMIN');
INSERT INTO T_ROLES (ROLE_ID,NAME) VALUES (2,'ADMIN');
INSERT INTO T_ROLES (ROLE_ID,NAME) VALUES (3,'USER');
INSERT INTO T_ROLES (ROLE_ID,NAME) VALUES (4,'CLIENT');

INSERT INTO T_DEPARTMENTS (DEPARTMENT_ID, DEPARTMENT_NAME , MANAGER_ID) VALUES (1,'Patentes',null);
INSERT INTO T_DEPARTMENTS (DEPARTMENT_ID, DEPARTMENT_NAME , MANAGER_ID) VALUES (2,'Tramites',null);
INSERT INTO T_DEPARTMENTS (DEPARTMENT_ID, DEPARTMENT_NAME , MANAGER_ID) VALUES (3,'Plataforma de Servicios',null);
INSERT INTO T_DEPARTMENTS (DEPARTMENT_ID, DEPARTMENT_NAME , MANAGER_ID) VALUES (4,'Informatica',null);
INSERT INTO T_DEPARTMENTS (DEPARTMENT_ID, DEPARTMENT_NAME , MANAGER_ID) VALUES (5,'Dirección Tributaria',null);
INSERT INTO T_DEPARTMENTS (DEPARTMENT_ID, DEPARTMENT_NAME , MANAGER_ID) VALUES (6,'Alcaldía Municipal',null);
INSERT INTO T_DEPARTMENTS (DEPARTMENT_ID, DEPARTMENT_NAME , MANAGER_ID) VALUES (7,'Bienes Inmuebles',null);
INSERT INTO T_DEPARTMENTS (DEPARTMENT_ID, DEPARTMENT_NAME , MANAGER_ID) VALUES (8,'Cobros',null);
INSERT INTO T_DEPARTMENTS (DEPARTMENT_ID, DEPARTMENT_NAME , MANAGER_ID) VALUES (9,'Catastro',null);
INSERT INTO T_DEPARTMENTS (DEPARTMENT_ID, DEPARTMENT_NAME , MANAGER_ID) VALUES (10,'Ingeniería',null);
INSERT INTO T_DEPARTMENTS (DEPARTMENT_ID, DEPARTMENT_NAME , MANAGER_ID) VALUES (11,'Archivo Central',null);



INSERT INTO T_JOBS (JOB_ID, JOB_TITLE) VALUES (1,'Secretario(a)');
INSERT INTO T_JOBS (JOB_ID, JOB_TITLE) VALUES (2,'Alcalde');
INSERT INTO T_JOBS (JOB_ID, JOB_TITLE) VALUES (3,'Coordinador(a)');
INSERT INTO T_JOBS (JOB_ID, JOB_TITLE) VALUES (4,'Oficinista');

INSERT INTO T_EMPLOYEES (EMPLOYEE_ID,DNI,FIRST_NAME,FIRST_SURNAME,SECOND_SURNAME,EMAIL,TELEPHONE,DEPARTMENT_ID,JOB_ID,STATUS) VALUES (1,'11111111','Joseph','Granda','Vargas','informatica@sanpablo.go.cr','87276862',4,3,'ENABLED');
INSERT INTO T_EMPLOYEES (EMPLOYEE_ID,DNI,FIRST_NAME,FIRST_SURNAME,SECOND_SURNAME,EMAIL,TELEPHONE,DEPARTMENT_ID,JOB_ID,STATUS) VALUES (2,'22222222','Michael','Zapata','Narvaez','mikezn-07@hotmail.com','89773283',4,3,'ENABLED');
INSERT INTO T_EMPLOYEES (EMPLOYEE_ID,DNI,FIRST_NAME,FIRST_SURNAME,SECOND_SURNAME,EMAIL,TELEPHONE,DEPARTMENT_ID,JOB_ID,STATUS) VALUES (3,'33333333','Jose','Piedra','Solís','jose.ps.02@gmail.com','	',4,3,'ENABLED');
INSERT INTO T_EMPLOYEES (EMPLOYEE_ID,DNI,FIRST_NAME,FIRST_SURNAME,SECOND_SURNAME,EMAIL,TELEPHONE,DEPARTMENT_ID,JOB_ID,STATUS) VALUES (4,'44444444','Emanuel','Barrantes','Guzman','emanueladribg@mail.com','61951996',4,3,'ENABLED');
INSERT INTO T_EMPLOYEES (EMPLOYEE_ID,DNI,FIRST_NAME,FIRST_SURNAME,SECOND_SURNAME,EMAIL,TELEPHONE,DEPARTMENT_ID,JOB_ID,STATUS) VALUES (5,'55555555','Nestor','Pasos','Rocha','ness_199348@hotmail.com','71059791',4,3,'ENABLED');

INSERT INTO T_USERS (USERNAME,PASSWD,ROLE_ID,EMPLOYEE_ID,CLIENT_ID,STATUS) VALUES('jgrandav','12345678',1,1,null,'ENABLED');
INSERT INTO T_USERS (USERNAME,PASSWD,ROLE_ID,EMPLOYEE_ID,CLIENT_ID,STATUS) VALUES('mzapatan','12345678',1,2,null,'ENABLED');
INSERT INTO T_USERS (USERNAME,PASSWD,ROLE_ID,EMPLOYEE_ID,CLIENT_ID,STATUS) VALUES('jpiedras','12345678',1,3,null,'ENABLED');
INSERT INTO T_USERS (USERNAME,PASSWD,ROLE_ID,EMPLOYEE_ID,CLIENT_ID,STATUS) VALUES('ebarrant','12345678',1,4,null,'ENABLED');
INSERT INTO T_USERS (USERNAME,PASSWD,ROLE_ID,EMPLOYEE_ID,CLIENT_ID,STATUS) VALUES('npasosro','12345678',1,5,null,'ENABLED');

-- Inserción de tramites con sus respectivos procedimientos

INSERT INTO T_REQUESTS (REQUEST_ID,TITLE,DESCRIPTION) VALUES (1,'Licencia para la comercialización de bebidas con contenido alcohólico','Proceso para el estudio y resolución de la solicitud de la licencia para la comercialización de bebidas alcohólicas, con base en las normas jurídicas que la regulan, teniendo como visión la calidad en la prestación del servicio, la satisfacción del usuario y la transparencia de la gestión.');
INSERT INTO T_REQUESTS (REQUEST_ID,TITLE,DESCRIPTION) VALUES (2,'Traslado de Licencia comercial','Proceso para el estudio y resolución de la solicitud de traslado de una  licencia comercial, con base en las normas jurídicas que la regulan, teniendo como visión la calidad en la prestación del servicio, la satisfacción del usuario y la transparencia de la gestión.');
INSERT INTO T_REQUESTS (REQUEST_ID,TITLE,DESCRIPTION) VALUES (3,'Licencia comercial','Proceso para el estudio y resolución de la solicitud de la licencia comercial, con base en las normas jurídicas que la regulan, teniendo como visión la calidad en la prestación del servicio, la satisfacción del usuario y la transparencia de la gestión.');

INSERT INTO T_REQUIREMENTS (REQUIREMENT_ID,TITLE,DESCRIPTION) VALUES (1,'Certificación de personería jurídica','Cuando se trate de sociedades, se debe aportar la respectiva certificación de la personería jurídica.');
INSERT INTO T_REQUIREMENTS (REQUIREMENT_ID,TITLE,DESCRIPTION) VALUES (2,'Copia de cédula propietario registral inmueble','Aportar fotocopia de la cedula de identidad del propietario registral del inmueble donde se pretende desarrollar la actividad comercial. Cuando se trate de sociedades se debe presentar la respectiva certificación de personería jurídica.');
INSERT INTO T_REQUIREMENTS (REQUIREMENT_ID,TITLE,DESCRIPTION) VALUES (3,'Constancia de FODESAF al día','Aportar documento del Fondo de Desarrollo Social y Asignaciones Familiares, mediante el cual se hará constar que la persona jurídica o física solicitante de la licencia se encuentra  al día en el pago de sus obligaciones con el FODESAF.');
INSERT INTO T_REQUIREMENTS (REQUIREMENT_ID,TITLE,DESCRIPTION) VALUES (4,'Solicitud','Solicitud del interesado personalmente o a través de la representación respectiva en cuyo caso debe presentar autorización correspondiente.');
INSERT INTO T_REQUIREMENTS (REQUIREMENT_ID,TITLE,DESCRIPTION) VALUES (5,'Dirección exacta para notificaciones','Registrar una dirección para notificaciones.');
INSERT INTO T_REQUIREMENTS (REQUIREMENT_ID,TITLE,DESCRIPTION) VALUES (6,'Certificado uso de suelo','Certificado de uso de suelo del tipo A, o del tipo B.');
INSERT INTO T_REQUIREMENTS (REQUIREMENT_ID,TITLE,DESCRIPTION) VALUES (7,'Comprobante de condiciones cumplidas uso suelo','Cuando el certificado de uso de suelo es de tipo B, deberá acompañar la solicitud con un documento del Departamento de Ingeniería de la Municipalidad haciendo constar que las condiciones fueron cumplidas');
INSERT INTO T_REQUIREMENTS (REQUIREMENT_ID,TITLE,DESCRIPTION) VALUES (8,'Copia de permiso sanitario de funcionamiento','Aportar copia del permiso sanitario de funcionamiento extendido por el Ministerio de Salud.');
INSERT INTO T_REQUIREMENTS (REQUIREMENT_ID,TITLE,DESCRIPTION) VALUES (9,'Constancia de CCSS','Aportar constancia de la Caja Costarricense del Seguro Social.');
INSERT INTO T_REQUIREMENTS (REQUIREMENT_ID,TITLE,DESCRIPTION) VALUES (10,'Poliza de de riesgos de trabajo','Aportar documento  de póliza de riesgos del trabajo, del Instituto Nacional de Seguros o en su defecto la exoneración respectiva.');
INSERT INTO T_REQUIREMENTS (REQUIREMENT_ID,TITLE,DESCRIPTION) VALUES (11,'Copia de contrato de arrendamiento','Copia del contrato de arrendamiento (cuando corresponda), o documento de autorización de uso del inmueble por parte del propietario registral.');
INSERT INTO T_REQUIREMENTS (REQUIREMENT_ID,TITLE,DESCRIPTION) VALUES (12,'Pago de impuestos municipales al día','Estar al día en el pago de impuestos municipales. Valida también para el propietario del inmueble donde se pretende desarrollar la actividad comercial.');
INSERT INTO T_REQUIREMENTS (REQUIREMENT_ID,TITLE,DESCRIPTION) VALUES (13,'Certificación literal o registral','Certificación literal  o registral');
INSERT INTO T_REQUIREMENTS (REQUIREMENT_ID,TITLE,DESCRIPTION) VALUES (14,'Demás requisitos relacionados','A estos requisitos se deben incorporar aquellos que específicamente regulen la naturaleza de la actividad comercial que se pretende desarrollar. ');

INSERT INTO T_REQUESTS_REQUIREMENTS (REQUEST_REQUIREMENT_ID,REQUEST_ID,REQUIREMENT_ID) VALUES (0,1,1);
INSERT INTO T_REQUESTS_REQUIREMENTS (REQUEST_REQUIREMENT_ID,REQUEST_ID,REQUIREMENT_ID) VALUES (0,1,2);
INSERT INTO T_REQUESTS_REQUIREMENTS (REQUEST_REQUIREMENT_ID,REQUEST_ID,REQUIREMENT_ID) VALUES (0,1,3);
INSERT INTO T_REQUESTS_REQUIREMENTS (REQUEST_REQUIREMENT_ID,REQUEST_ID,REQUIREMENT_ID) VALUES (0,1,4);
INSERT INTO T_REQUESTS_REQUIREMENTS (REQUEST_REQUIREMENT_ID,REQUEST_ID,REQUIREMENT_ID) VALUES (0,1,5);
INSERT INTO T_REQUESTS_REQUIREMENTS (REQUEST_REQUIREMENT_ID,REQUEST_ID,REQUIREMENT_ID) VALUES (0,1,6);
INSERT INTO T_REQUESTS_REQUIREMENTS (REQUEST_REQUIREMENT_ID,REQUEST_ID,REQUIREMENT_ID) VALUES (0,1,8);
INSERT INTO T_REQUESTS_REQUIREMENTS (REQUEST_REQUIREMENT_ID,REQUEST_ID,REQUIREMENT_ID) VALUES (0,2,1);
INSERT INTO T_REQUESTS_REQUIREMENTS (REQUEST_REQUIREMENT_ID,REQUEST_ID,REQUIREMENT_ID) VALUES (0,2,2);
INSERT INTO T_REQUESTS_REQUIREMENTS (REQUEST_REQUIREMENT_ID,REQUEST_ID,REQUIREMENT_ID) VALUES (0,2,3);
INSERT INTO T_REQUESTS_REQUIREMENTS (REQUEST_REQUIREMENT_ID,REQUEST_ID,REQUIREMENT_ID) VALUES (0,2,4);
INSERT INTO T_REQUESTS_REQUIREMENTS (REQUEST_REQUIREMENT_ID,REQUEST_ID,REQUIREMENT_ID) VALUES (0,2,5);
INSERT INTO T_REQUESTS_REQUIREMENTS (REQUEST_REQUIREMENT_ID,REQUEST_ID,REQUIREMENT_ID) VALUES (0,2,6);
INSERT INTO T_REQUESTS_REQUIREMENTS (REQUEST_REQUIREMENT_ID,REQUEST_ID,REQUIREMENT_ID) VALUES (0,2,7);
INSERT INTO T_REQUESTS_REQUIREMENTS (REQUEST_REQUIREMENT_ID,REQUEST_ID,REQUIREMENT_ID) VALUES (0,2,8);
INSERT INTO T_REQUESTS_REQUIREMENTS (REQUEST_REQUIREMENT_ID,REQUEST_ID,REQUIREMENT_ID) VALUES (0,2,10);
INSERT INTO T_REQUESTS_REQUIREMENTS (REQUEST_REQUIREMENT_ID,REQUEST_ID,REQUIREMENT_ID) VALUES (0,3,1);
INSERT INTO T_REQUESTS_REQUIREMENTS (REQUEST_REQUIREMENT_ID,REQUEST_ID,REQUIREMENT_ID) VALUES (0,3,2);
INSERT INTO T_REQUESTS_REQUIREMENTS (REQUEST_REQUIREMENT_ID,REQUEST_ID,REQUIREMENT_ID) VALUES (0,3,3);
INSERT INTO T_REQUESTS_REQUIREMENTS (REQUEST_REQUIREMENT_ID,REQUEST_ID,REQUIREMENT_ID) VALUES (0,3,4);
INSERT INTO T_REQUESTS_REQUIREMENTS (REQUEST_REQUIREMENT_ID,REQUEST_ID,REQUIREMENT_ID) VALUES (0,3,9);

-- Procedimientos almacenados para insertar elementos

DELIMITER $$
CREATE PROCEDURE PROC_INSERT_EMPLOYEE(pDNI varchar(20),pFIRST_NAME varchar (50), pFIRST_SURNAME varchar(50), pSECOND_SURNAME varchar(50),
pEMAIL varchar(50),pTELEPHONE varchar(25), pDEPARTMENT_ID int,pJOB_ID int)
BEGIN
INSERT INTO T_EMPLOYEES (DNI,EMPLOYEE_ID,FIRST_NAME,FIRST_SURNAME,SECOND_SURNAME,EMAIL,TELEPHONE,DEPARTMENT_ID,JOB_ID,STATUS) 
VALUES (0,pDNI,pFIRST_NAME,pFIRST_SURNAME,pSECOND_SURNAME,pEMAIL,pTELEPHONE,pDEPARTMENT_ID,pJOB_ID,'ENABLED');
END$$
DELIMITER;

DELIMITER $$
CREATE PROCEDURE PROC_INSERT_REQUEST(pTITLE varchar(250), pDESCRIPTION varchar(1000))
BEGIN
INSERT INTO T_REQUESTS (REQUEST_ID,TITLE,DESCRIPTION) 
VALUES (0,pTITLE,pDESCRIPTION);
END$$
DELIMITER;

DELIMITER  $$
CREATE PROCEDURE PROC_INSERT_REQUIREMENT (pTITLE varchar(250),pDESCRIPTION varchar(1000))
BEGIN
INSERT INTO T_REQUIREMENTS(REQUIREMENT_ID,TITLE,DESCRIPTION) VALUES (0,pTITLE,pDESCRIPTION);
END$$
DELIMITER ;

DELIMITER  $$
CREATE PROCEDURE PROC_INSERT_REQUESTS_REQUIREMENTS (pREQUEST_ID int,pREQUIREMENT_ID int)
BEGIN
INSERT INTO T_REQUESTS_REQUIREMENTS(T_REQUEST_REQUIREMENT,REQUEST_ID,REQUIREMENT_ID) VALUES (0,pREQUEST_ID,pREQUIREMENT_ID);
END$$
DELIMITER ;


DELIMITER  $$
CREATE PROCEDURE PROC_INSERT_DEPARTMENT (pDEPARTMENT_NAME varchar(50))
BEGIN
INSERT INTO T_DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID) VALUES (0,pDEPARTMENT_NAME,null);
END$$
DELIMITER ;

DELIMITER  $$
CREATE PROCEDURE PROC_INSERT_JOB (pJOB_TITLE varchar(50))
BEGIN
INSERT INTO T_JOBS (JOB_ID,JOB_TITLE) VALUES (0,pJOB_TITLE);
END$$
DELIMITER ;


-- Procedimientos almacenados para eliminar
DELIMITER  $$
CREATE PROCEDURE PROC_DELETE_EMPLOYEE(pUSERNAME varchar(10))
BEGIN
DECLARE vEMPLOYEE_ID INT DEFAULT 0;
SELECT EMPLOYEE_ID INTO vEMPLOYEE_ID FROM T_USERS WHERE USERNAME = pUSERNAME;
UPDATE T_EMPLOYEES SET STATUS = 'DISABLED' WHERE EMPLOYEE_ID = vEMPLOYEE_ID;
UPDATE T_USERS SET STATUS = 'DISABLED' WHERE USERNAME = pUSERNAME;
END$$
DELIMITER ;

DELIMITER  $$
CREATE PROCEDURE PROC_DELETE_DEPARTMENT(pDEPARTMENT_ID int)
BEGIN
DELETE FROM T_DEPARTMENTS WHERE DEPARTMENT_ID = pDEPARTMENT_ID;
END$$
DELIMITER ;

DELIMITER  $$
CREATE PROCEDURE PROC_DELETE_JOB(pJOB_ID int)
BEGIN
DELETE FROM T_JOBS WHERE JOB_ID = pJOB_ID;
END$$
DELIMITER ;

DELIMITER  $$
CREATE PROCEDURE PROC_DELETE_REQUIREMENT(pREQUIREMENT_ID int)
BEGIN
DELETE FROM T_REQUIREMENTS WHERE REQUIREMENT_ID = pREQUIREMENT_ID;
END$$
DELIMITER ;

DELIMITER  $$
CREATE PROCEDURE PROC_DELETE_REQUEST(pREQUEST_ID int)
BEGIN
DELETE FROM T_REQUIREMENTS WHERE REQUEST_ID = pREQUEST_ID;
DELETE FROM T_REQUEST_ID WHERE REQUEST_ID = pREQUEST_ID;
END$$
DELIMITER ;

DELIMITER  $$
CREATE PROCEDURE PROC_DELETE_REQUESTS_REQUIREMENTS (pREQUEST_REQUIREMENT_ID int)
BEGIN
DELETE FROM T_REQUESTS_REQUIREMENTS WHERE REQUEST_REQUIREMENT_ID = pREQUEST_REQUIREMENT_ID;
END$$
DELIMITER ;

-- Procedimientos almacenados para actualizar

DELIMITER $$
CREATE PROCEDURE PROC_UPDATE_EMPLOYEE(EMPLOYEE_ID int, pDNI varchar(20),pFIRST_NAME varchar (50), pFIRST_SURNAME varchar(50), pSECOND_SURNAME varchar(50),
pEMAIL varchar(50),pTELEPHONE varchar(25), pDEPARTMENT_ID int,pJOB_ID int,pSTATUS varchar(10))
BEGIN
UPDATE T_EMPLOYEES SET DNI = pDNI,FIRST_NAME=pFIRST_NAME,FIRST_SURNAME=pFIRST_SURNAME,SECOND_SURNAME=pSECOND_SURNAME,EMAIL=pEMAIL,TELEPHONE=pTELEPHONE,DEPARTMENT_ID=pDEPARTMENT_ID,JOB_ID=pJOB_ID,STATUS=pSTATUS
WHERE EMPLOYEE_ID = pEMPLOYEE_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE PROC_UPDATE_REQUEST(pREQUEST_ID int, pTITLE varchar(250), pDESCRIPTION varchar(1000))
BEGIN
UPDATE T_REQUEST SET TITLE=pTITLE, DESCRIPTION=pDESCRIPTION WHERE REQUEST_ID = pREQUEST_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE PROC_UPDATE_REQUIREMENT(pREQUIREMENT_ID int , pTITLE varchar(250),pDESCRIPTION varchar(1000))
BEGIN
UPDATE T_REQUIREMENTS SET TITLE=pTITLE,DESCRIPTION=pDESCRIPTION WHERE REQUIREMENT_ID = pREQUIREMENT_ID;
END$$
DELIMITER ;

DELIMITER  $$
CREATE PROCEDURE PROC_UPDATE_REQUESTS_REQUIREMENTS (pREQUEST_REQUIREMENT_ID int, pREQUEST_ID int,pREQUIREMENT_ID int)
BEGIN
UPDATE T_REQUESTS_REQUIREMENTS SET REQUEST_ID = pREQUEST_ID, REQUIREMENT_ID = pREQUIREMENT_ID WHERE REQUEST_REQUIREMENT_ID = pREQUEST_REQUIREMENT_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE PROC_UPDATE_DEPARTMENT(pDEPARTMENT_ID int , pDEPARTMENT_NAME varchar(50))
BEGIN
UPDATE T_DEPARTMENTS SET DEPARTMENT_NAME=pDEPARTMENT_NAME WHERE DEPARTMENT_ID = PDEPARTMENT_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE PROC_UPDATE_JOB(pJOB_ID int , pJOB_TITLE varchar(50))
BEGIN
UPDATE T_JOBS SET JOB_TITLE=pJOB_TITLE WHERE JOB_ID = pJOB_ID;
END$$
DELIMITER ;

-- procedimientos almacenados para listar

DELIMITER $$
CREATE PROCEDURE PROC_LIST_JOBS()
BEGIN
    SELECT * 
    FROM T_JOBS;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE PROC_LIST_DEPARTMENTS()
BEGIN
    SELECT * 
    FROM T_DEPARTMENTS;
END$$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE PROC_LIST_REQUESTS_REQUIREMENTS()
BEGIN
    SELECT * 
    FROM T_REQUESTS_REQUIREMENTS;
END$$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE PROC_LIST_REQUESTS()
BEGIN
    SELECT * 
    FROM T_REQUESTS;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE PROC_LIST_EMPLOYEES()
BEGIN
    SELECT * 
    FROM T_EMPLOYEES;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE PROC_LIST_REQUIREMENTS()
BEGIN
    SELECT * 
    FROM T_REQUIREMENTS;
END$$
DELIMITER ;